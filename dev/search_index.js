var documenterSearchIndex = {"docs":
[{"location":"#KeemenaPreprocessing","page":"Home","title":"KeemenaPreprocessing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for KeemenaPreprocessing.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#KeemenaPreprocessing.PreprocessBundle","page":"Home","title":"KeemenaPreprocessing.PreprocessBundle","text":"PreprocessBundle{IdT,OffsetT,ExtraT}\n\nIdT    : unsigned integer type for token ids (e.g. UInt32)\nOffsetT   : integer type for offsets  (e.g. Int or UInt32)\nExtraT : payload supplied by downstream packages (Nothing by default)\n\n\n\n\n\n","category":"type"},{"location":"#KeemenaPreprocessing.with_extras!-Union{Tuple{OffsetT}, Tuple{IdT}, Tuple{PreprocessBundle{IdT, OffsetT}, Any}} where {IdT, OffsetT}","page":"Home","title":"KeemenaPreprocessing.with_extras!","text":"with_extras!(bundle, new_extras; setlevel = nothing) -> new_bundle\n\nReturn a new PreprocessBundle sharing the same corpus & vocab but carrying new_extras.  If setlevel is provided it toggles the corresponding levels_present flag to true.\n\n\n\n\n\n","category":"method"}]
}
